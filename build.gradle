plugins {
    id("org.jetbrains.kotlin.jvm") version "1.4.10"
    id("org.jetbrains.kotlin.kapt") version "1.4.10"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.4.10"
    id("org.jetbrains.kotlin.plugin.serialization") version "1.4.10"
    id("groovy")
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.2.0"
}



//apply plugin: "java"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo1.maven.org/maven2" }
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}

kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "com.example.*")
    }
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"

    //ktlint "com.pinterest:ktlint:0.39.0"
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    //implementation("io.micronaut.micrometer:micronaut-micrometer-registry-influx")

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1"
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")

    implementation("javax.annotation:javax.annotation-api")

    implementation("org.apache.logging.log4j:log4j-core:2.12.1")
    //compile "org.mongodb:mongodb-driver-sync:4.1.1"
    compile "org.mongodb:mongodb-driver-sync:4.2.0-beta1"

    implementation "org.litote.kmongo:kmongo:4.2.3"
    implementation "io.github.microutils:kotlin-logging:1.10.11"

    runtimeOnly("org.apache.logging.log4j:log4j-api:2.12.1")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.12.1")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

//    kapt "io.micronaut:micronaut-inject-java"
//    kapt "io.micronaut:micronaut-validation"
//    kapt "io.micronaut.configuration:micronaut-openapi"
//    kapt "io.micronaut:micronaut-validation"
//
//    kaptTest "io.micronaut:micronaut-inject-java"
//    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
//    testImplementation "org.codehaus.groovy:groovy-all:2.5.13"
//    testImplementation "org.testcontainers:spock:1.15.0"
}


application {
    mainClass.set("com.example.ApplicationKt")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

configurations {
    ktlint
}

//tasks {
//    compileKotlin {
//        kotlinOptions {
//            jvmTarget = "11"
//        }
//    }
//    compileTestKotlin {
//        kotlinOptions {
//            jvmTarget = "11"
//        }
//    }
//}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileGroovy {
    dependsOn tasks.getByPath('compileKotlin')
    classpath += files(compileKotlin.destinationDir)
}

compileTestGroovy {
    dependsOn tasks.getByPath('compileTestKotlin')
    classpath += files(compileTestKotlin.destinationDir)
}

allOpen {
    annotation("javax.inject.Singleton")
}

